Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> stmts
Rule 1     stmts -> stmts stmt
Rule 2     stmts -> empty
Rule 3     stmt -> assignment
Rule 4     stmt -> for
Rule 5     stmt -> if
Rule 6     stmt -> while
Rule 7     stmt -> expr
Rule 8     if -> IF expr TWOP LBRACKET stmts RBRACKET elif
Rule 9     elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif
Rule 10    elif -> else
Rule 11    else -> ELSE TWOP LBRACKET stmts RBRACKET
Rule 12    else -> empty
Rule 13    while -> WHILE expr TWOP LBRACKET stmts RBRACKET
Rule 14    for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
Rule 15    assignment -> ID ASSIGN expr
Rule 16    expr -> expr PLUS term
Rule 17    expr -> expr MINUS term
Rule 18    expr -> expr GE term
Rule 19    expr -> expr EQUAL term
Rule 20    expr -> expr NE term
Rule 21    expr -> expr LT term
Rule 22    expr -> expr LE term
Rule 23    expr -> expr GT term
Rule 24    expr -> term
Rule 25    term -> term TIMES factor
Rule 26    term -> term DIVIDE factor
Rule 27    term -> factor
Rule 28    factor -> NUMBER
Rule 29    factor -> ID
Rule 30    factor -> LPAREN expr RPAREN
Rule 31    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 15
DIVIDE               : 26
ELIF                 : 9
ELSE                 : 11
EQUAL                : 19
FOR                  : 14
GE                   : 18
GT                   : 23
ID                   : 14 15 29
IF                   : 8
IN                   : 14
LBRACKET             : 8 9 11 13 14
LE                   : 22
LPAREN               : 14 30
LT                   : 21
MINUS                : 17
NE                   : 20
NUMBER               : 14 28
PLUS                 : 16
RANGE                : 14
RBRACKET             : 8 9 11 13 14
RPAREN               : 14 30
TIMES                : 25
TWOP                 : 8 9 11 13 14
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

assignment           : 3
elif                 : 8 9
else                 : 10
empty                : 2 12
expr                 : 7 8 9 13 15 16 17 18 19 20 21 22 23 30
factor               : 25 26 27
for                  : 4
if                   : 5
stmt                 : 1
stmts                : 1 8 9 11 13 14 0
term                 : 16 17 18 19 20 21 22 23 24 25 26
while                : 6

Parsing method: LALR

state 0

    (0) S' -> . stmts
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)
    $end            reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> stmts .
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    expr                           shift and go to state 8
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 2

    (2) stmts -> empty .

    ID              reduce using rule 2 (stmts -> empty .)
    FOR             reduce using rule 2 (stmts -> empty .)
    IF              reduce using rule 2 (stmts -> empty .)
    WHILE           reduce using rule 2 (stmts -> empty .)
    NUMBER          reduce using rule 2 (stmts -> empty .)
    LPAREN          reduce using rule 2 (stmts -> empty .)
    $end            reduce using rule 2 (stmts -> empty .)
    RBRACKET        reduce using rule 2 (stmts -> empty .)


state 3

    (1) stmts -> stmts stmt .

    ID              reduce using rule 1 (stmts -> stmts stmt .)
    FOR             reduce using rule 1 (stmts -> stmts stmt .)
    IF              reduce using rule 1 (stmts -> stmts stmt .)
    WHILE           reduce using rule 1 (stmts -> stmts stmt .)
    NUMBER          reduce using rule 1 (stmts -> stmts stmt .)
    LPAREN          reduce using rule 1 (stmts -> stmts stmt .)
    $end            reduce using rule 1 (stmts -> stmts stmt .)
    RBRACKET        reduce using rule 1 (stmts -> stmts stmt .)


state 4

    (3) stmt -> assignment .

    ID              reduce using rule 3 (stmt -> assignment .)
    FOR             reduce using rule 3 (stmt -> assignment .)
    IF              reduce using rule 3 (stmt -> assignment .)
    WHILE           reduce using rule 3 (stmt -> assignment .)
    NUMBER          reduce using rule 3 (stmt -> assignment .)
    LPAREN          reduce using rule 3 (stmt -> assignment .)
    $end            reduce using rule 3 (stmt -> assignment .)
    RBRACKET        reduce using rule 3 (stmt -> assignment .)


state 5

    (4) stmt -> for .

    ID              reduce using rule 4 (stmt -> for .)
    FOR             reduce using rule 4 (stmt -> for .)
    IF              reduce using rule 4 (stmt -> for .)
    WHILE           reduce using rule 4 (stmt -> for .)
    NUMBER          reduce using rule 4 (stmt -> for .)
    LPAREN          reduce using rule 4 (stmt -> for .)
    $end            reduce using rule 4 (stmt -> for .)
    RBRACKET        reduce using rule 4 (stmt -> for .)


state 6

    (5) stmt -> if .

    ID              reduce using rule 5 (stmt -> if .)
    FOR             reduce using rule 5 (stmt -> if .)
    IF              reduce using rule 5 (stmt -> if .)
    WHILE           reduce using rule 5 (stmt -> if .)
    NUMBER          reduce using rule 5 (stmt -> if .)
    LPAREN          reduce using rule 5 (stmt -> if .)
    $end            reduce using rule 5 (stmt -> if .)
    RBRACKET        reduce using rule 5 (stmt -> if .)


state 7

    (6) stmt -> while .

    ID              reduce using rule 6 (stmt -> while .)
    FOR             reduce using rule 6 (stmt -> while .)
    IF              reduce using rule 6 (stmt -> while .)
    WHILE           reduce using rule 6 (stmt -> while .)
    NUMBER          reduce using rule 6 (stmt -> while .)
    LPAREN          reduce using rule 6 (stmt -> while .)
    $end            reduce using rule 6 (stmt -> while .)
    RBRACKET        reduce using rule 6 (stmt -> while .)


state 8

    (7) stmt -> expr .
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    ID              reduce using rule 7 (stmt -> expr .)
    FOR             reduce using rule 7 (stmt -> expr .)
    IF              reduce using rule 7 (stmt -> expr .)
    WHILE           reduce using rule 7 (stmt -> expr .)
    NUMBER          reduce using rule 7 (stmt -> expr .)
    LPAREN          reduce using rule 7 (stmt -> expr .)
    $end            reduce using rule 7 (stmt -> expr .)
    RBRACKET        reduce using rule 7 (stmt -> expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 9

    (15) assignment -> ID . ASSIGN expr
    (29) factor -> ID .

    ASSIGN          shift and go to state 25
    TIMES           reduce using rule 29 (factor -> ID .)
    DIVIDE          reduce using rule 29 (factor -> ID .)
    PLUS            reduce using rule 29 (factor -> ID .)
    MINUS           reduce using rule 29 (factor -> ID .)
    GE              reduce using rule 29 (factor -> ID .)
    EQUAL           reduce using rule 29 (factor -> ID .)
    NE              reduce using rule 29 (factor -> ID .)
    LT              reduce using rule 29 (factor -> ID .)
    LE              reduce using rule 29 (factor -> ID .)
    GT              reduce using rule 29 (factor -> ID .)
    ID              reduce using rule 29 (factor -> ID .)
    FOR             reduce using rule 29 (factor -> ID .)
    IF              reduce using rule 29 (factor -> ID .)
    WHILE           reduce using rule 29 (factor -> ID .)
    NUMBER          reduce using rule 29 (factor -> ID .)
    LPAREN          reduce using rule 29 (factor -> ID .)
    $end            reduce using rule 29 (factor -> ID .)
    RBRACKET        reduce using rule 29 (factor -> ID .)


state 10

    (14) for -> FOR . ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET

    ID              shift and go to state 26


state 11

    (30) factor -> LPAREN . expr RPAREN
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    expr                           shift and go to state 27
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 12

    (28) factor -> NUMBER .

    TIMES           reduce using rule 28 (factor -> NUMBER .)
    DIVIDE          reduce using rule 28 (factor -> NUMBER .)
    PLUS            reduce using rule 28 (factor -> NUMBER .)
    MINUS           reduce using rule 28 (factor -> NUMBER .)
    GE              reduce using rule 28 (factor -> NUMBER .)
    EQUAL           reduce using rule 28 (factor -> NUMBER .)
    NE              reduce using rule 28 (factor -> NUMBER .)
    LT              reduce using rule 28 (factor -> NUMBER .)
    LE              reduce using rule 28 (factor -> NUMBER .)
    GT              reduce using rule 28 (factor -> NUMBER .)
    ID              reduce using rule 28 (factor -> NUMBER .)
    FOR             reduce using rule 28 (factor -> NUMBER .)
    IF              reduce using rule 28 (factor -> NUMBER .)
    WHILE           reduce using rule 28 (factor -> NUMBER .)
    NUMBER          reduce using rule 28 (factor -> NUMBER .)
    LPAREN          reduce using rule 28 (factor -> NUMBER .)
    $end            reduce using rule 28 (factor -> NUMBER .)
    RPAREN          reduce using rule 28 (factor -> NUMBER .)
    TWOP            reduce using rule 28 (factor -> NUMBER .)
    RBRACKET        reduce using rule 28 (factor -> NUMBER .)


state 13

    (8) if -> IF . expr TWOP LBRACKET stmts RBRACKET elif
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    expr                           shift and go to state 29
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 14

    (13) while -> WHILE . expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    expr                           shift and go to state 30
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 15

    (24) expr -> term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 24 (expr -> term .)
    MINUS           reduce using rule 24 (expr -> term .)
    GE              reduce using rule 24 (expr -> term .)
    EQUAL           reduce using rule 24 (expr -> term .)
    NE              reduce using rule 24 (expr -> term .)
    LT              reduce using rule 24 (expr -> term .)
    LE              reduce using rule 24 (expr -> term .)
    GT              reduce using rule 24 (expr -> term .)
    ID              reduce using rule 24 (expr -> term .)
    FOR             reduce using rule 24 (expr -> term .)
    IF              reduce using rule 24 (expr -> term .)
    WHILE           reduce using rule 24 (expr -> term .)
    NUMBER          reduce using rule 24 (expr -> term .)
    LPAREN          reduce using rule 24 (expr -> term .)
    $end            reduce using rule 24 (expr -> term .)
    RPAREN          reduce using rule 24 (expr -> term .)
    TWOP            reduce using rule 24 (expr -> term .)
    RBRACKET        reduce using rule 24 (expr -> term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 16

    (27) term -> factor .

    TIMES           reduce using rule 27 (term -> factor .)
    DIVIDE          reduce using rule 27 (term -> factor .)
    PLUS            reduce using rule 27 (term -> factor .)
    MINUS           reduce using rule 27 (term -> factor .)
    GE              reduce using rule 27 (term -> factor .)
    EQUAL           reduce using rule 27 (term -> factor .)
    NE              reduce using rule 27 (term -> factor .)
    LT              reduce using rule 27 (term -> factor .)
    LE              reduce using rule 27 (term -> factor .)
    GT              reduce using rule 27 (term -> factor .)
    ID              reduce using rule 27 (term -> factor .)
    FOR             reduce using rule 27 (term -> factor .)
    IF              reduce using rule 27 (term -> factor .)
    WHILE           reduce using rule 27 (term -> factor .)
    NUMBER          reduce using rule 27 (term -> factor .)
    LPAREN          reduce using rule 27 (term -> factor .)
    $end            reduce using rule 27 (term -> factor .)
    RPAREN          reduce using rule 27 (term -> factor .)
    TWOP            reduce using rule 27 (term -> factor .)
    RBRACKET        reduce using rule 27 (term -> factor .)


state 17

    (16) expr -> expr PLUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 33
    factor                         shift and go to state 16

state 18

    (17) expr -> expr MINUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 34
    factor                         shift and go to state 16

state 19

    (18) expr -> expr GE . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 35
    factor                         shift and go to state 16

state 20

    (19) expr -> expr EQUAL . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 36
    factor                         shift and go to state 16

state 21

    (20) expr -> expr NE . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 37
    factor                         shift and go to state 16

state 22

    (21) expr -> expr LT . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 38
    factor                         shift and go to state 16

state 23

    (22) expr -> expr LE . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 39
    factor                         shift and go to state 16

state 24

    (23) expr -> expr GT . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    term                           shift and go to state 40
    factor                         shift and go to state 16

state 25

    (15) assignment -> ID ASSIGN . expr
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    expr                           shift and go to state 41
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 26

    (14) for -> FOR ID . IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET

    IN              shift and go to state 42


state 27

    (30) factor -> LPAREN expr . RPAREN
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 28

    (29) factor -> ID .

    TIMES           reduce using rule 29 (factor -> ID .)
    DIVIDE          reduce using rule 29 (factor -> ID .)
    RPAREN          reduce using rule 29 (factor -> ID .)
    PLUS            reduce using rule 29 (factor -> ID .)
    MINUS           reduce using rule 29 (factor -> ID .)
    GE              reduce using rule 29 (factor -> ID .)
    EQUAL           reduce using rule 29 (factor -> ID .)
    NE              reduce using rule 29 (factor -> ID .)
    LT              reduce using rule 29 (factor -> ID .)
    LE              reduce using rule 29 (factor -> ID .)
    GT              reduce using rule 29 (factor -> ID .)
    TWOP            reduce using rule 29 (factor -> ID .)
    ID              reduce using rule 29 (factor -> ID .)
    FOR             reduce using rule 29 (factor -> ID .)
    IF              reduce using rule 29 (factor -> ID .)
    WHILE           reduce using rule 29 (factor -> ID .)
    NUMBER          reduce using rule 29 (factor -> ID .)
    LPAREN          reduce using rule 29 (factor -> ID .)
    $end            reduce using rule 29 (factor -> ID .)
    RBRACKET        reduce using rule 29 (factor -> ID .)


state 29

    (8) if -> IF expr . TWOP LBRACKET stmts RBRACKET elif
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    TWOP            shift and go to state 44
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 30

    (13) while -> WHILE expr . TWOP LBRACKET stmts RBRACKET
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    TWOP            shift and go to state 45
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 31

    (25) term -> term TIMES . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    factor                         shift and go to state 46

state 32

    (26) term -> term DIVIDE . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    factor                         shift and go to state 47

state 33

    (16) expr -> expr PLUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 16 (expr -> expr PLUS term .)
    MINUS           reduce using rule 16 (expr -> expr PLUS term .)
    GE              reduce using rule 16 (expr -> expr PLUS term .)
    EQUAL           reduce using rule 16 (expr -> expr PLUS term .)
    NE              reduce using rule 16 (expr -> expr PLUS term .)
    LT              reduce using rule 16 (expr -> expr PLUS term .)
    LE              reduce using rule 16 (expr -> expr PLUS term .)
    GT              reduce using rule 16 (expr -> expr PLUS term .)
    ID              reduce using rule 16 (expr -> expr PLUS term .)
    FOR             reduce using rule 16 (expr -> expr PLUS term .)
    IF              reduce using rule 16 (expr -> expr PLUS term .)
    WHILE           reduce using rule 16 (expr -> expr PLUS term .)
    NUMBER          reduce using rule 16 (expr -> expr PLUS term .)
    LPAREN          reduce using rule 16 (expr -> expr PLUS term .)
    $end            reduce using rule 16 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 16 (expr -> expr PLUS term .)
    TWOP            reduce using rule 16 (expr -> expr PLUS term .)
    RBRACKET        reduce using rule 16 (expr -> expr PLUS term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 34

    (17) expr -> expr MINUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 17 (expr -> expr MINUS term .)
    MINUS           reduce using rule 17 (expr -> expr MINUS term .)
    GE              reduce using rule 17 (expr -> expr MINUS term .)
    EQUAL           reduce using rule 17 (expr -> expr MINUS term .)
    NE              reduce using rule 17 (expr -> expr MINUS term .)
    LT              reduce using rule 17 (expr -> expr MINUS term .)
    LE              reduce using rule 17 (expr -> expr MINUS term .)
    GT              reduce using rule 17 (expr -> expr MINUS term .)
    ID              reduce using rule 17 (expr -> expr MINUS term .)
    FOR             reduce using rule 17 (expr -> expr MINUS term .)
    IF              reduce using rule 17 (expr -> expr MINUS term .)
    WHILE           reduce using rule 17 (expr -> expr MINUS term .)
    NUMBER          reduce using rule 17 (expr -> expr MINUS term .)
    LPAREN          reduce using rule 17 (expr -> expr MINUS term .)
    $end            reduce using rule 17 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 17 (expr -> expr MINUS term .)
    TWOP            reduce using rule 17 (expr -> expr MINUS term .)
    RBRACKET        reduce using rule 17 (expr -> expr MINUS term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 35

    (18) expr -> expr GE term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 18 (expr -> expr GE term .)
    MINUS           reduce using rule 18 (expr -> expr GE term .)
    GE              reduce using rule 18 (expr -> expr GE term .)
    EQUAL           reduce using rule 18 (expr -> expr GE term .)
    NE              reduce using rule 18 (expr -> expr GE term .)
    LT              reduce using rule 18 (expr -> expr GE term .)
    LE              reduce using rule 18 (expr -> expr GE term .)
    GT              reduce using rule 18 (expr -> expr GE term .)
    ID              reduce using rule 18 (expr -> expr GE term .)
    FOR             reduce using rule 18 (expr -> expr GE term .)
    IF              reduce using rule 18 (expr -> expr GE term .)
    WHILE           reduce using rule 18 (expr -> expr GE term .)
    NUMBER          reduce using rule 18 (expr -> expr GE term .)
    LPAREN          reduce using rule 18 (expr -> expr GE term .)
    $end            reduce using rule 18 (expr -> expr GE term .)
    RPAREN          reduce using rule 18 (expr -> expr GE term .)
    TWOP            reduce using rule 18 (expr -> expr GE term .)
    RBRACKET        reduce using rule 18 (expr -> expr GE term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 36

    (19) expr -> expr EQUAL term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 19 (expr -> expr EQUAL term .)
    MINUS           reduce using rule 19 (expr -> expr EQUAL term .)
    GE              reduce using rule 19 (expr -> expr EQUAL term .)
    EQUAL           reduce using rule 19 (expr -> expr EQUAL term .)
    NE              reduce using rule 19 (expr -> expr EQUAL term .)
    LT              reduce using rule 19 (expr -> expr EQUAL term .)
    LE              reduce using rule 19 (expr -> expr EQUAL term .)
    GT              reduce using rule 19 (expr -> expr EQUAL term .)
    ID              reduce using rule 19 (expr -> expr EQUAL term .)
    FOR             reduce using rule 19 (expr -> expr EQUAL term .)
    IF              reduce using rule 19 (expr -> expr EQUAL term .)
    WHILE           reduce using rule 19 (expr -> expr EQUAL term .)
    NUMBER          reduce using rule 19 (expr -> expr EQUAL term .)
    LPAREN          reduce using rule 19 (expr -> expr EQUAL term .)
    $end            reduce using rule 19 (expr -> expr EQUAL term .)
    RPAREN          reduce using rule 19 (expr -> expr EQUAL term .)
    TWOP            reduce using rule 19 (expr -> expr EQUAL term .)
    RBRACKET        reduce using rule 19 (expr -> expr EQUAL term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 37

    (20) expr -> expr NE term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 20 (expr -> expr NE term .)
    MINUS           reduce using rule 20 (expr -> expr NE term .)
    GE              reduce using rule 20 (expr -> expr NE term .)
    EQUAL           reduce using rule 20 (expr -> expr NE term .)
    NE              reduce using rule 20 (expr -> expr NE term .)
    LT              reduce using rule 20 (expr -> expr NE term .)
    LE              reduce using rule 20 (expr -> expr NE term .)
    GT              reduce using rule 20 (expr -> expr NE term .)
    ID              reduce using rule 20 (expr -> expr NE term .)
    FOR             reduce using rule 20 (expr -> expr NE term .)
    IF              reduce using rule 20 (expr -> expr NE term .)
    WHILE           reduce using rule 20 (expr -> expr NE term .)
    NUMBER          reduce using rule 20 (expr -> expr NE term .)
    LPAREN          reduce using rule 20 (expr -> expr NE term .)
    $end            reduce using rule 20 (expr -> expr NE term .)
    RPAREN          reduce using rule 20 (expr -> expr NE term .)
    TWOP            reduce using rule 20 (expr -> expr NE term .)
    RBRACKET        reduce using rule 20 (expr -> expr NE term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 38

    (21) expr -> expr LT term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 21 (expr -> expr LT term .)
    MINUS           reduce using rule 21 (expr -> expr LT term .)
    GE              reduce using rule 21 (expr -> expr LT term .)
    EQUAL           reduce using rule 21 (expr -> expr LT term .)
    NE              reduce using rule 21 (expr -> expr LT term .)
    LT              reduce using rule 21 (expr -> expr LT term .)
    LE              reduce using rule 21 (expr -> expr LT term .)
    GT              reduce using rule 21 (expr -> expr LT term .)
    ID              reduce using rule 21 (expr -> expr LT term .)
    FOR             reduce using rule 21 (expr -> expr LT term .)
    IF              reduce using rule 21 (expr -> expr LT term .)
    WHILE           reduce using rule 21 (expr -> expr LT term .)
    NUMBER          reduce using rule 21 (expr -> expr LT term .)
    LPAREN          reduce using rule 21 (expr -> expr LT term .)
    $end            reduce using rule 21 (expr -> expr LT term .)
    RPAREN          reduce using rule 21 (expr -> expr LT term .)
    TWOP            reduce using rule 21 (expr -> expr LT term .)
    RBRACKET        reduce using rule 21 (expr -> expr LT term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 39

    (22) expr -> expr LE term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 22 (expr -> expr LE term .)
    MINUS           reduce using rule 22 (expr -> expr LE term .)
    GE              reduce using rule 22 (expr -> expr LE term .)
    EQUAL           reduce using rule 22 (expr -> expr LE term .)
    NE              reduce using rule 22 (expr -> expr LE term .)
    LT              reduce using rule 22 (expr -> expr LE term .)
    LE              reduce using rule 22 (expr -> expr LE term .)
    GT              reduce using rule 22 (expr -> expr LE term .)
    ID              reduce using rule 22 (expr -> expr LE term .)
    FOR             reduce using rule 22 (expr -> expr LE term .)
    IF              reduce using rule 22 (expr -> expr LE term .)
    WHILE           reduce using rule 22 (expr -> expr LE term .)
    NUMBER          reduce using rule 22 (expr -> expr LE term .)
    LPAREN          reduce using rule 22 (expr -> expr LE term .)
    $end            reduce using rule 22 (expr -> expr LE term .)
    RPAREN          reduce using rule 22 (expr -> expr LE term .)
    TWOP            reduce using rule 22 (expr -> expr LE term .)
    RBRACKET        reduce using rule 22 (expr -> expr LE term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 40

    (23) expr -> expr GT term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    PLUS            reduce using rule 23 (expr -> expr GT term .)
    MINUS           reduce using rule 23 (expr -> expr GT term .)
    GE              reduce using rule 23 (expr -> expr GT term .)
    EQUAL           reduce using rule 23 (expr -> expr GT term .)
    NE              reduce using rule 23 (expr -> expr GT term .)
    LT              reduce using rule 23 (expr -> expr GT term .)
    LE              reduce using rule 23 (expr -> expr GT term .)
    GT              reduce using rule 23 (expr -> expr GT term .)
    ID              reduce using rule 23 (expr -> expr GT term .)
    FOR             reduce using rule 23 (expr -> expr GT term .)
    IF              reduce using rule 23 (expr -> expr GT term .)
    WHILE           reduce using rule 23 (expr -> expr GT term .)
    NUMBER          reduce using rule 23 (expr -> expr GT term .)
    LPAREN          reduce using rule 23 (expr -> expr GT term .)
    $end            reduce using rule 23 (expr -> expr GT term .)
    RPAREN          reduce using rule 23 (expr -> expr GT term .)
    TWOP            reduce using rule 23 (expr -> expr GT term .)
    RBRACKET        reduce using rule 23 (expr -> expr GT term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 41

    (15) assignment -> ID ASSIGN expr .
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    ID              reduce using rule 15 (assignment -> ID ASSIGN expr .)
    FOR             reduce using rule 15 (assignment -> ID ASSIGN expr .)
    IF              reduce using rule 15 (assignment -> ID ASSIGN expr .)
    WHILE           reduce using rule 15 (assignment -> ID ASSIGN expr .)
    NUMBER          reduce using rule 15 (assignment -> ID ASSIGN expr .)
    LPAREN          reduce using rule 15 (assignment -> ID ASSIGN expr .)
    $end            reduce using rule 15 (assignment -> ID ASSIGN expr .)
    RBRACKET        reduce using rule 15 (assignment -> ID ASSIGN expr .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 42

    (14) for -> FOR ID IN . RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET

    RANGE           shift and go to state 48


state 43

    (30) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    GE              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    NE              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    LT              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    LE              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    GT              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    ID              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    FOR             reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    IF              reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    TWOP            reduce using rule 30 (factor -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 30 (factor -> LPAREN expr RPAREN .)


state 44

    (8) if -> IF expr TWOP . LBRACKET stmts RBRACKET elif

    LBRACKET        shift and go to state 49


state 45

    (13) while -> WHILE expr TWOP . LBRACKET stmts RBRACKET

    LBRACKET        shift and go to state 50


state 46

    (25) term -> term TIMES factor .

    TIMES           reduce using rule 25 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 25 (term -> term TIMES factor .)
    PLUS            reduce using rule 25 (term -> term TIMES factor .)
    MINUS           reduce using rule 25 (term -> term TIMES factor .)
    GE              reduce using rule 25 (term -> term TIMES factor .)
    EQUAL           reduce using rule 25 (term -> term TIMES factor .)
    NE              reduce using rule 25 (term -> term TIMES factor .)
    LT              reduce using rule 25 (term -> term TIMES factor .)
    LE              reduce using rule 25 (term -> term TIMES factor .)
    GT              reduce using rule 25 (term -> term TIMES factor .)
    ID              reduce using rule 25 (term -> term TIMES factor .)
    FOR             reduce using rule 25 (term -> term TIMES factor .)
    IF              reduce using rule 25 (term -> term TIMES factor .)
    WHILE           reduce using rule 25 (term -> term TIMES factor .)
    NUMBER          reduce using rule 25 (term -> term TIMES factor .)
    LPAREN          reduce using rule 25 (term -> term TIMES factor .)
    $end            reduce using rule 25 (term -> term TIMES factor .)
    RPAREN          reduce using rule 25 (term -> term TIMES factor .)
    TWOP            reduce using rule 25 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 25 (term -> term TIMES factor .)


state 47

    (26) term -> term DIVIDE factor .

    TIMES           reduce using rule 26 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 26 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 26 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 26 (term -> term DIVIDE factor .)
    GE              reduce using rule 26 (term -> term DIVIDE factor .)
    EQUAL           reduce using rule 26 (term -> term DIVIDE factor .)
    NE              reduce using rule 26 (term -> term DIVIDE factor .)
    LT              reduce using rule 26 (term -> term DIVIDE factor .)
    LE              reduce using rule 26 (term -> term DIVIDE factor .)
    GT              reduce using rule 26 (term -> term DIVIDE factor .)
    ID              reduce using rule 26 (term -> term DIVIDE factor .)
    FOR             reduce using rule 26 (term -> term DIVIDE factor .)
    IF              reduce using rule 26 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 26 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 26 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 26 (term -> term DIVIDE factor .)
    $end            reduce using rule 26 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 26 (term -> term DIVIDE factor .)
    TWOP            reduce using rule 26 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 26 (term -> term DIVIDE factor .)


state 48

    (14) for -> FOR ID IN RANGE . LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET

    LPAREN          shift and go to state 51


state 49

    (8) if -> IF expr TWOP LBRACKET . stmts RBRACKET elif
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    RBRACKET        reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 52
    empty                          shift and go to state 2

state 50

    (13) while -> WHILE expr TWOP LBRACKET . stmts RBRACKET
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    RBRACKET        reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 53
    empty                          shift and go to state 2

state 51

    (14) for -> FOR ID IN RANGE LPAREN . NUMBER RPAREN TWOP LBRACKET stmts RBRACKET

    NUMBER          shift and go to state 54


state 52

    (8) if -> IF expr TWOP LBRACKET stmts . RBRACKET elif
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 55
    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    expr                           shift and go to state 8
    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 53

    (13) while -> WHILE expr TWOP LBRACKET stmts . RBRACKET
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 56
    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    expr                           shift and go to state 8
    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 54

    (14) for -> FOR ID IN RANGE LPAREN NUMBER . RPAREN TWOP LBRACKET stmts RBRACKET

    RPAREN          shift and go to state 57


state 55

    (8) if -> IF expr TWOP LBRACKET stmts RBRACKET . elif
    (9) elif -> . ELIF expr TWOP LBRACKET stmts RBRACKET elif
    (10) elif -> . else
    (11) else -> . ELSE TWOP LBRACKET stmts RBRACKET
    (12) else -> . empty
    (31) empty -> .

    ELIF            shift and go to state 59
    ELSE            shift and go to state 61
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)
    $end            reduce using rule 31 (empty -> .)
    RBRACKET        reduce using rule 31 (empty -> .)

    elif                           shift and go to state 58
    else                           shift and go to state 60
    empty                          shift and go to state 62

state 56

    (13) while -> WHILE expr TWOP LBRACKET stmts RBRACKET .

    ID              reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    IF              reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    WHILE           reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    $end            reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 13 (while -> WHILE expr TWOP LBRACKET stmts RBRACKET .)


state 57

    (14) for -> FOR ID IN RANGE LPAREN NUMBER RPAREN . TWOP LBRACKET stmts RBRACKET

    TWOP            shift and go to state 63


state 58

    (8) if -> IF expr TWOP LBRACKET stmts RBRACKET elif .

    ID              reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    FOR             reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    IF              reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    WHILE           reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    NUMBER          reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    LPAREN          reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    $end            reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)
    RBRACKET        reduce using rule 8 (if -> IF expr TWOP LBRACKET stmts RBRACKET elif .)


state 59

    (9) elif -> ELIF . expr TWOP LBRACKET stmts RBRACKET elif
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 12
    ID              shift and go to state 28
    LPAREN          shift and go to state 11

    expr                           shift and go to state 64
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 60

    (10) elif -> else .

    ID              reduce using rule 10 (elif -> else .)
    FOR             reduce using rule 10 (elif -> else .)
    IF              reduce using rule 10 (elif -> else .)
    WHILE           reduce using rule 10 (elif -> else .)
    NUMBER          reduce using rule 10 (elif -> else .)
    LPAREN          reduce using rule 10 (elif -> else .)
    $end            reduce using rule 10 (elif -> else .)
    RBRACKET        reduce using rule 10 (elif -> else .)


state 61

    (11) else -> ELSE . TWOP LBRACKET stmts RBRACKET

    TWOP            shift and go to state 65


state 62

    (12) else -> empty .

    ID              reduce using rule 12 (else -> empty .)
    FOR             reduce using rule 12 (else -> empty .)
    IF              reduce using rule 12 (else -> empty .)
    WHILE           reduce using rule 12 (else -> empty .)
    NUMBER          reduce using rule 12 (else -> empty .)
    LPAREN          reduce using rule 12 (else -> empty .)
    $end            reduce using rule 12 (else -> empty .)
    RBRACKET        reduce using rule 12 (else -> empty .)


state 63

    (14) for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP . LBRACKET stmts RBRACKET

    LBRACKET        shift and go to state 66


state 64

    (9) elif -> ELIF expr . TWOP LBRACKET stmts RBRACKET elif
    (16) expr -> expr . PLUS term
    (17) expr -> expr . MINUS term
    (18) expr -> expr . GE term
    (19) expr -> expr . EQUAL term
    (20) expr -> expr . NE term
    (21) expr -> expr . LT term
    (22) expr -> expr . LE term
    (23) expr -> expr . GT term

    TWOP            shift and go to state 67
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    GE              shift and go to state 19
    EQUAL           shift and go to state 20
    NE              shift and go to state 21
    LT              shift and go to state 22
    LE              shift and go to state 23
    GT              shift and go to state 24


state 65

    (11) else -> ELSE TWOP . LBRACKET stmts RBRACKET

    LBRACKET        shift and go to state 68


state 66

    (14) for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET . stmts RBRACKET
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    RBRACKET        reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 69
    empty                          shift and go to state 2

state 67

    (9) elif -> ELIF expr TWOP . LBRACKET stmts RBRACKET elif

    LBRACKET        shift and go to state 70


state 68

    (11) else -> ELSE TWOP LBRACKET . stmts RBRACKET
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    RBRACKET        reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 71
    empty                          shift and go to state 2

state 69

    (14) for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts . RBRACKET
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 72
    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    expr                           shift and go to state 8
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 70

    (9) elif -> ELIF expr TWOP LBRACKET . stmts RBRACKET elif
    (1) stmts -> . stmts stmt
    (2) stmts -> . empty
    (31) empty -> .

    RBRACKET        reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)

    stmts                          shift and go to state 73
    empty                          shift and go to state 2

state 71

    (11) else -> ELSE TWOP LBRACKET stmts . RBRACKET
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 74
    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    expr                           shift and go to state 8
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 72

    (14) for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .

    ID              reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    IF              reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    WHILE           reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    $end            reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 14 (for -> FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET .)


state 73

    (9) elif -> ELIF expr TWOP LBRACKET stmts . RBRACKET elif
    (1) stmts -> stmts . stmt
    (3) stmt -> . assignment
    (4) stmt -> . for
    (5) stmt -> . if
    (6) stmt -> . while
    (7) stmt -> . expr
    (15) assignment -> . ID ASSIGN expr
    (14) for -> . FOR ID IN RANGE LPAREN NUMBER RPAREN TWOP LBRACKET stmts RBRACKET
    (8) if -> . IF expr TWOP LBRACKET stmts RBRACKET elif
    (13) while -> . WHILE expr TWOP LBRACKET stmts RBRACKET
    (16) expr -> . expr PLUS term
    (17) expr -> . expr MINUS term
    (18) expr -> . expr GE term
    (19) expr -> . expr EQUAL term
    (20) expr -> . expr NE term
    (21) expr -> . expr LT term
    (22) expr -> . expr LE term
    (23) expr -> . expr GT term
    (24) expr -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 75
    ID              shift and go to state 9
    FOR             shift and go to state 10
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 11

    expr                           shift and go to state 8
    stmt                           shift and go to state 3
    assignment                     shift and go to state 4
    for                            shift and go to state 5
    if                             shift and go to state 6
    while                          shift and go to state 7
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 74

    (11) else -> ELSE TWOP LBRACKET stmts RBRACKET .

    ID              reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    IF              reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    WHILE           reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    $end            reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 11 (else -> ELSE TWOP LBRACKET stmts RBRACKET .)


state 75

    (9) elif -> ELIF expr TWOP LBRACKET stmts RBRACKET . elif
    (9) elif -> . ELIF expr TWOP LBRACKET stmts RBRACKET elif
    (10) elif -> . else
    (11) else -> . ELSE TWOP LBRACKET stmts RBRACKET
    (12) else -> . empty
    (31) empty -> .

    ELIF            shift and go to state 59
    ELSE            shift and go to state 61
    ID              reduce using rule 31 (empty -> .)
    FOR             reduce using rule 31 (empty -> .)
    IF              reduce using rule 31 (empty -> .)
    WHILE           reduce using rule 31 (empty -> .)
    NUMBER          reduce using rule 31 (empty -> .)
    LPAREN          reduce using rule 31 (empty -> .)
    $end            reduce using rule 31 (empty -> .)
    RBRACKET        reduce using rule 31 (empty -> .)

    elif                           shift and go to state 76
    else                           shift and go to state 60
    empty                          shift and go to state 62

state 76

    (9) elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .

    ID              reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    FOR             reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    IF              reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    WHILE           reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    NUMBER          reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    LPAREN          reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    $end            reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)
    RBRACKET        reduce using rule 9 (elif -> ELIF expr TWOP LBRACKET stmts RBRACKET elif .)

